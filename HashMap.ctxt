#BlueJ class context
comment0.params=
comment0.target=HashMap()
comment0.text=\r\n\ No\ arg\ Constructor\ for\ objects\ of\ class\ HashMap\r\n
comment1.params=initialCapacity
comment1.target=HashMap(int)
comment1.text=\r\n\ Single\ arg\ \ Constructor\ for\ objects\ of\ class\ HashMap\r\n\ @param\ int\ starting\ size\ of\ hash\ map\ \r\n
comment10.params=
comment10.target=java.util.Iterator\ values()
comment10.text=\r\n\ provides\ an\ Iterator\ of\ values\ when\ called\ \ \r\n\ @return\ Iterator\ of\ values\ in\ hash\ map\r\n
comment11.params=key
comment11.target=int\ findBucket(java.lang.Object)
comment11.text=\r\n\ Will\ return\ the\ hased\ key\ value\ of\ an\ entry.\ \r\n\ @param\ K\ key\r\n\ @return\ int\ hashed\ keyvalue\r\n
comment12.params=key
comment12.target=int\ findMatchingBucket(java.lang.Object)
comment12.text=\r\n\ Find\ the\ mathcing\ bucket\ of\ an\ inputed\ key\ value\r\n\ @param\ K\ key\ \r\n\ @return\ int\ bucket\ hashed\ value\r\n
comment13.params=
comment13.target=int\ resize()
comment13.text=\r\n\ test\ the\ size\ of\ the\ array\ then\ add\ more\ capacity\ to\ it\ if\ needed\r\n\ @return\ int\ prime\ number.\r\n
comment14.params=
comment14.target=void\ rehash()
comment14.text=\r\n\ determine\ new\ array\ size\ by\ calling\ resize()\r\n\ creates\ a\ new\ array\ at\ the\ new\ prime\ number\ size()\ \r\n
comment2.params=initialCapacity\ loadFactor
comment2.target=HashMap(int,\ double)
comment2.text=\r\n\ Double\ arg\ \ Constructor\ for\ objects\ of\ class\ HashMap\r\n\ @param\ int\ starting\ size\ of\ hash\ map\r\n\ @param\ double\ load\ factor\ percentage\ of\ the\ size\ used\ for\ threshold\ \r\n
comment3.params=
comment3.target=int\ getSize()
comment3.text=\r\n\ returns\ size\ \r\n\ \r\n\ @return\ int\ size\r\n
comment4.params=
comment4.target=boolean\ isEmpty()
comment4.text=\r\n\ returns\ a\ boolean\ determining\ if\ the\ HashMap\ is\ empty.\ \r\n\ @return\ boolean\ \r\n
comment5.params=
comment5.target=void\ clear()
comment5.text=\r\n\ clears\ the\ map\ when\ called\ \r\n
comment6.params=key
comment6.target=java.lang.Object\ get(java.lang.Object)
comment6.text=\r\n\ returns\ the\ key\ of\ an\ entry\ when\ called\ \r\n\ @param\ K\ key\ \r\n\ @return\ value\ \r\n
comment7.params=key\ value
comment7.target=java.lang.Object\ put(java.lang.Object,\ java.lang.Object)
comment7.text=\r\n\ replaces\ an\ item\ in\ the\ map\r\n\ @param\ K\ key\ input\ key\ to\ find\ position\ \r\n\ @param\ V\ value\ being\ added\r\n
comment8.params=key
comment8.target=java.lang.Object\ remove(java.lang.Object)
comment8.text=\r\n\ removes\ an\ entry\ when\ called\ \r\n\ @params\ K\ key\ to\ find\ position.\ \r\n\ @returns\ the\ removed\ value\ from\ the\ map\r\n
comment9.params=
comment9.target=java.util.Iterator\ keys()
comment9.text=\r\n\ Provides\ an\ Iterator\ of\ keys\ when\ called.\ \r\n\ @return\ Iterator\ of\ the\ key\ in\ the\ has\ map\r\n
numComments=15
