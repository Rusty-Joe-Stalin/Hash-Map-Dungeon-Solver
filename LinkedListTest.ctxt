#BlueJ class context
comment0.params=
comment0.target=LinkedListTest()
comment0.text=\r\n\ Default\ constructor\ for\ test\ class\ LinkedListTest\r\n
comment1.params=
comment1.target=void\ setUp()
comment1.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment10.params=
comment10.target=void\ testRemoveException()
comment10.text=\r\n\ remove\ method\ exception\ test\ \r\n\ remove()\ method\ ran\ against\ an\ empty\ list.\ \r\n\ exception\ is\ expected.\ \r\n
comment11.params=
comment11.target=void\ testSet1()
comment11.text=\r\n\ create\ a\ new\ list\r\n\ add\ new\ data\ to\ the\ list\r\n\ test\ if\ the\ data\ was\ added.\ \r\n\ replace\ the\ previous\ data\r\n\ expected\ value\ is\ "This\ is\ new\ test\ data".\ \r\n
comment12.params=
comment12.target=void\ testSet2()
comment12.text=\r\n\ create\ a\ new\ list\r\n\ add\ new\ data\ to\ the\ list.\ \r\n\ test\ if\ the\ \ old\ data\ was\ returned.\ \r\n
comment13.params=
comment13.target=void\ testSetException()
comment13.text=\r\n\ run\ set()\ against\ an\ empty\ list.\ \r\n\ an\ exception\ is\ expected.\ \r\n
comment14.params=
comment14.target=void\ addAfterTest1()
comment14.text=\r\n\ test\ the\ add\ after\ method\r\n
comment15.params=
comment15.target=void\ addAfterTest2()
comment15.text=\r\n\ test\ the\ add\ after\ method\ again\ \r\n\ expected\ exception\ \r\n
comment16.params=
comment16.target=void\ addBeforeTest1()
comment16.text=\r\n\ test\ the\ add\ before\ method\r\n
comment17.params=
comment17.target=void\ addBeforeTest2()
comment17.text=\r\n\ test\ the\ add\ before\ method\r\n\ expceted\ exception\ \r\n\ \ \r\n
comment18.params=
comment18.target=void\ addFirstTest()
comment18.text=\r\n\ test\ add\ first\ method\r\n
comment19.params=
comment19.target=void\ testAddLast()
comment19.text=\r\n\ add\ last\ test\r\n
comment2.params=
comment2.target=void\ tearDown()
comment2.text=\r\n\ Tears\ down\ the\ test\ fixture.\r\n\r\n\ Called\ after\ every\ test\ case\ method.\r\n
comment20.params=
comment20.target=void\ getTest()
comment20.text=\r\n\ test\ get\ method\ \r\n\ add\ 2\ items\ to\ list,\ then\ find\ and\ return\ indicated\ item\ \r\n
comment21.params=
comment21.target=void\ getTest2()
comment21.text=\r\n\ test\ get\ method\ \r\n\ add\ 2\ items\ to\ list,\ then\ find\ and\ return\ indicated\ item\ \r\n
comment22.params=
comment22.target=void\ getFirstTest()
comment22.text=\r\n\ test\ get\ method\ \r\n\ add\ 2\ items\ to\ list,\ then\ find\ and\ return\ indicated\ item\ \r\n
comment23.params=
comment23.target=void\ getLastTest()
comment23.text=\r\n\ test\ get\ method\ \r\n\ add\ 2\ items\ to\ list,\ then\ find\ and\ return\ indicated\ item\ \r\n
comment24.params=
comment24.target=void\ testInsert1()
comment24.text=\r\n\ test\ the\ insert\ method\ by\ creating\ a\ list\ of\ objects\ then\ \r\n\ insert\ a\ object\ into\ the\ list\ \r\n
comment25.params=
comment25.target=void\ testInsert2()
comment25.text=\r\n\ insert\ a\ item\ into\ an\ empty\ list\ \r\n
comment26.params=
comment26.target=void\ setTest1()
comment26.text=\r\n\ test\ the\ set\ method\ by\ creating\ a\ list\ then\ replcing\ item\ with\ new\ data.\ \r\n\ then\ use\ the\ get\ method\ to\ retrive\ the\ item\ to\ see\ if\ it\ was\ replaced.\ \r\n
comment27.params=
comment27.target=void\ setTest2()
comment27.text=\r\n\ expected\ exception\ \r\n
comment28.params=
comment28.target=void\ testSetFirst()
comment28.text=\r\n\ test\ the\ setFirst\ method\ \r\n\ create\ a\ list\ with\ 1\ item\r\n\ call\ method\ and\ test\ if\ old\ data\ is\ returned\ then\ \r\n\ call\ get\ to\ test\ first\ position\ \r\n
comment29.params=
comment29.target=void\ testSetLast()
comment29.text=\r\n\ test\ the\ setFirst\ method\ \r\n\ create\ a\ list\ with\ 1\ item\r\n\ call\ method\ and\ test\ if\ old\ data\ is\ returned\ then\ \r\n\ call\ get\ to\ test\ first\ position\r\n
comment3.params=
comment3.target=void\ linkListAdd()
comment3.text=\r\n\ Add\ new\ data\ to\ linked\ list\ if\ returns\ true\ test\ is\ valid.\ \r\n
comment30.params=
comment30.target=void\ testRemoveByPosition()
comment30.text=\r\n\ create\ a\ new\ list\ and\ remove\ the\ last\ position\r\n\ then\ check\ the\ list\ size\ to\ see\ if\ it\ was\ removed.\ \r\n\ \r\n
comment31.params=
comment31.target=void\ testRemoveByPositionEx()
comment31.text=\r\n\ create\ a\ new\ list\ and\ remove\ the\ last\ position\r\n\ then\ check\ the\ list\ size\ to\ see\ if\ it\ was\ removed.\ \r\n\ \r\n
comment32.params=
comment32.target=void\ testRemoveFirst()
comment32.text=\r\n\ create\ new\ list\ then\ remove\ the\ first\ item.\r\n\ use\ the\ get\ method\ to\ return\ the\ first\ and\ check\ if\ it\ was\ removed\ \r\n
comment33.params=
comment33.target=void\ testRemoveLast()
comment33.text=\r\n\ create\ new\ list\ add\ new\ \r\n
comment34.params=
comment34.target=void\ testInnerNodeConstructor()
comment34.text=\r\n\ test\ the\ inner\ Node\ classes\ constructor\r\n
comment35.params=
comment35.target=void\ testInnerNodeGetElement()
comment35.text=\r\n\ test\ the\ inner\ nodes\ getElement\ method\ using\ reflection\r\n
comment36.params=
comment36.target=void\ testInnerNodeSetElement()
comment36.text=\r\n\ test\ the\ inner\ nodes\ getElement\ method\ using\ reflection\r\n
comment37.params=
comment37.target=void\ testInnerNodeGetNext()
comment37.text=\r\n\ test\ the\ inner\ nodes\ getNext\ method\ using\ relfection\ \r\n
comment38.params=
comment38.target=void\ testInnerNodeSetNext()
comment38.text=\r\n\ test\ the\ inner\ nodes\ setNext\ method\ using\ relfection.\ \r\n
comment39.params=
comment39.target=void\ testInnerNodeGetPrevious()
comment39.text=\r\n\ test\ the\ get\ previous\ method\ in\ the\ inner\ node\ class.\ \r\n
comment4.params=
comment4.target=void\ linklistEmptyTest()
comment4.text=\r\n\ test\ for\ an\ empty\ list\r\n
comment40.params=
comment40.target=void\ testInnerNodeSetPrevious()
comment40.text=\r\n\ test\ the\ inner\ nodes\ setNext\ method\ using\ relfection.\ \r\n
comment5.params=
comment5.target=void\ testGetSize1()
comment5.text=\r\n\ test\ to\ determine\ the\ size\ of\ the\ list.\ \r\n\ \ list\ is\ empty\ expected\ size\ is\ 0\r\n
comment6.params=
comment6.target=void\ testGetSize2()
comment6.text=\r\n\ test\ to\ determine\ the\ size\ of\ the\ list.\ \r\n\ data\ has\ been\ added\ to\ list\ expected\ size\ is\ 1\r\n
comment7.params=
comment7.target=void\ testGet()
comment7.text=\r\n\ test\ to\ validate\ the\ get\ method.\ \r\n\ expected\ value\ is\ "This\ is\ test\ Data".\ \r\n
comment8.params=
comment8.target=void\ testGetException()
comment8.text=\r\n\ test\ the\ expected\ exception\ in\ the\ get\ method.\ \ \r\n
comment9.params=
comment9.target=void\ testRemove()
comment9.text=\r\n\ test\ the\ remove\ method.\ \r\n\ first\ I\ added\ data\ to\ the\ list\ then\ ran\ the\ remove()\r\n\ expected\ value\ is\ 0\r\n
numComments=41
