#BlueJ class context
comment0.params=
comment0.target=LinkedList()
comment0.text=\r\nLinkedList\ constructor\ creates\ a\ new\ link\ list\ when\ called.\r\n
comment1.params=data
comment1.target=boolean\ add(java.lang.Comparable)
comment1.text=\r\nAdds\ a\ new\ node\ to\ the\ link\ list\r\n@param\ E\ data\ -\ data\ being\ added\ to\ the\ list\r\n
comment10.params=data
comment10.target=boolean\ addFirst(java.lang.Comparable)
comment10.text=\r\n\ add\ a\ new\ node\ to\ the\ linked\ list\ at\ the\ head\r\n\ @param\ E\ data\ -\ data\ being\ added\ to\ the\ head\ of\ the\ list.\r\n\ @return\ boolean\ -\ return\ true\ if\ valid\r\n
comment11.params=data
comment11.target=boolean\ addLast(java.lang.Comparable)
comment11.text=\r\n\ add\ a\ new\ node\ at\ the\ end\ of\ the\ list.\r\n\ @param\ E\ data\ -\ data\ being\ added\ to\ the\ list\r\n\ @return\ boolean\ -\ returns\ true\ if\ data\ is\ added\r\n
comment12.params=position
comment12.target=java.lang.Comparable\ get(int)
comment12.text=\r\n\ return\ the\ data\ in\ the\ numeric\ position\ specified\ item\ in\ the\ linked\ list.\r\n\ @param\ int\ position\ -\ the\ position\ that\ the\ node\ is\ located.\r\n\ @return\ Node<E>\ -\ returns\ the\ node\ requested.\r\n\r\n
comment13.params=
comment13.target=java.lang.Comparable\ getFirst()
comment13.text=\r\n\ Return\ the\ first\ data\ item\ in\ the\ linked\ list\ by\ calling\ 'Get'\r\n\ @return\ element\ -\ returns\ the\ head\ element.\r\n
comment14.params=
comment14.target=java.lang.Comparable\ getLast()
comment14.text=\r\n\ Returns\ the\ last\ item\ in\ the\ list\r\n\ @return\ E\ -\ the\ last\ element\ in\ the\ list\r\n
comment15.params=data
comment15.target=boolean\ insert(java.lang.Comparable)
comment15.text=\r\nDetermine\ where\ to\ add\ a\ new\ node\ to\ the\ linked\ list.\ The\ new\r\nnode\ is\ added\ in\ the\ proper\ location\ based\ on\ the\ data\ to\ be\r\nadded\ (the\ list\ is\ kept\ in\ ascending\ sorted\ order\ automatically)\r\n@param\ E\ data\ -\ data\ being\ inserted\ into\ the\ list.\r\n@return\ boolean\ \ -\ true\ when\ inserted\ into\ list.\r\n
comment16.params=data\ position
comment16.target=java.lang.Comparable\ set(java.lang.Comparable,\ int)
comment16.text=\r\n\ Change\ the\ data\ in\ the\ node\ position\r\n\ number\ specified.\ This\ method\ does\ not\r\n\ change\ node\ position,\ it\ only\ changes\r\n\ the\ data\ the\ node\ points\ to.\ If\ the\r\n\ position\ is\ outside\ the\ boundaries\ of\ the\r\n\ linked\ list\ an\ exception\ is\ thrown.\r\n\ @param\ E\ data\ -\ data\ to\ replace\ old\ data\ at\ the\ indexed\ position\r\n\ @param\ int\ position\ -\ indexed\ positio\ in\ the\ list\r\n\r\n\ @return\ \ E\ old\ data.\r\n
comment17.params=data
comment17.target=java.lang.Comparable\ setFirst(java.lang.Comparable)
comment17.text=\r\n\ Change\ the\ data\ in\ the\ head\ node.\ This\r\n\ method\ does\ not\ change\ node\ position,\ it\r\n\ only\ changes\ the\ data\ the\ node\ points\ to.\ If\r\n\ there\ is\ no\ head\ an\ exception\ is\ thrown.\r\n\ @param\ E\ data\ \ -\ data\ being\ set\r\n\ @exception\ NoSuchElementException\ -\ throws\ new\ exception\ when\ list\ is\ empty.\r\n\ @return\ E\ data\ -\ returns\ old\ data\ being\ replaced.\r\n
comment18.params=data
comment18.target=java.lang.Comparable\ setLast(java.lang.Comparable)
comment18.text=\r\n\ Change\ the\ data\ in\ the\ head\ node.\ This\r\n\ method\ does\ not\ change\ node\ position,\ it\r\n\ only\ changes\ the\ data\ the\ node\ points\ to.\ If\r\n\ there\ is\ no\ head\ an\ exception\ is\ thrown.\r\n\ @param\ E\ data\ \ -\ data\ being\ set\r\n\ @exception\ NoSuchElementException\ -\ throws\ new\ exception\ when\ list\ is\ empty.\r\n\ @return\ data\ -\ returns\ old\ data\ being\ replaced.\r\n
comment19.params=position
comment19.target=java.lang.Comparable\ remove(int)
comment19.text=\r\n\ Remove\ and\ return\ the\ data\ in\ the\ numeric\ position\r\n\ specified\ item\ in\ the\ linked\ list.\ If\ the\ position\ is\ outside\r\n\ the\ boundaries\ of\ the\ linked\ list\ an\ exception\ is\ thrown.\r\n\ @param\ int\ position\ -\ index\ position\r\n\ @return\ oldData\ -\ returns\ data\ being\ removed\r\n
comment2.params=
comment2.target=void\ clear()
comment2.text=\r\n\ Clears\ the\ list\ when\ called\r\n\r\n
comment20.params=
comment20.target=java.lang.Comparable\ removeFirst()
comment20.text=\r\n\ Remove\ and\ return\ the\ fist\ data\ item\ in\ the\ linked\ list\ by\r\n\ calling\ the\ 'remove'\r\n\ @return\ -\ Removed\ data.\r\n
comment21.params=
comment21.target=java.lang.Comparable\ removeLast()
comment21.text=\r\n\ remove\ and\ return\ the\ last\ item\ in\ the\ linked\ list.\r\n\ @exception\ NoSuchElementException\ -\ throws\ exception\ if\ list\ is\ empty.\r\n\ @return\ data\ from\ the\ Unlink\ tail\ method;\r\n
comment22.params=data\ oldData
comment22.target=boolean\ addAfter(java.lang.Comparable,\ java.lang.Comparable)
comment22.text=\r\n\ Determine\ where\ to\ add\ a\ new\ node\ to\ the\ linked\ list.\ The\r\n\ new\ node\ is\ to\ be\ added\ after\ the\ data\ value\ specified.\r\n\ @param\ E\ data\ -\ data\ being\ added\r\n\ @return\ Boolean\ -\ returns\ true\ if\ add\ was\ successful\r\n\ @exception\ NoSuchElementException\ thrown\ if\ current\ data\ is\ null.\r\n
comment23.params=data\ oldData
comment23.target=boolean\ addBefore(java.lang.Comparable,\ java.lang.Comparable)
comment23.text=\r\n\ Determine\ where\ to\ add\ a\ new\ node\ to\ the\ linked\ list.\ The\ new\r\n\ node\ is\ to\ be\ added\ before\ the\ node\ with\ the\ data\ specified\r\n@param\ E\ data\ -\ data\ being\ added\r\n@return\ Boolean\ -\ returns\ true\ if\ add\ was\ successful\r\n@exception\ NoSuchElementException\ thrown\ if\ current\ data\ is\ null.\r\n
comment24.params=data
comment24.target=java.lang.Comparable\ get(java.lang.Comparable)
comment24.text=\r\n\ Return\ the\ data\ using\ a\ value\ stored\ in\ the\ linked\ list.\ If\ there\ isn't\r\n\ any\ data\ in\ the\ list\ or\ the\ data\ is\ not\ found\ an\ exception\ is\ thrown.\r\n\ @param\ E\ data\ -\ data\ being\ retrived.\r\n\ @return\ E\ data\ -\ returns\ data\ being\ requested.\r\n\ @exception\ NoSuchElementException\ -\ thrown\ if\ null\ node\ is\ returned\r\n
comment25.params=data
comment25.target=java.lang.Comparable\ remove(java.lang.Comparable)
comment25.text=\r\n\ Remove\ and\ return\ the\ data\ using\ a\ value\ stored\r\n\ in\ the\ linked\ list.\ If\ there\ isn't\ any\ data\ in\ the\ list\ or\r\n\ the\ data\ is\ not\ found\ an\ exception\ is\ thrown.\r\n\ @param\ E\ data\ -\ data\ being\ retrived.\r\n\ @return\ E\ data\ -\ returns\ data\ being\ removed.\r\n\ @exception\ NoSuchElementException\ -\ thrown\ if\ null\ node\ is\ returned\r\n
comment26.params=data\ oldData
comment26.target=java.lang.Comparable\ set(java.lang.Comparable,\ java.lang.Comparable)
comment26.text=\r\n\ Change\ the\ data\ on\ a\ node\ using\ a\r\n\ value\ stored\ in\ the\ linked\ list.\ If\ there\ isn't\r\n\ any\ data\ in\ the\ list\ or\ the\ data\ is\ not\r\n\ found\ an\ exception\ is\ thrown.\r\n\ @param\ E\ data\ -\ data\ being\ retrived.\r\n\ @param\ E\ oldData\ -\ OldData\ being\ used\ the\ find\ index.\r\n\ @return\ E\ oldData\ -\ returns\ data\ orignially\ stored\ in\ the\ node.\r\n\ @exception\ NoSuchElementException\ -\ thrown\ if\ current\ node\ is\ null\r\n
comment27.params=data
comment27.target=LinkedList.Node\ find(java.lang.Comparable)
comment27.text=\r\n\ find\ data\ based\ on\ the\ poition\ of\ the\ data\ it\ contains\r\n@param\ E\ data\ -\ data\ used\ to\ compare\ each\ node\r\n@return\ data\ -\ returns\ the\ found\ node.\r\n
comment28.params=data\ current
comment28.target=java.lang.Comparable\ setData(java.lang.Comparable,\ LinkedList.Node)
comment28.text=\r\n\ Overwirtes\ a\ node\ when\ called\r\n\ @param\ E\ \ passed\ new\ data\r\n\ @param\ Node<E>\ current\ data\r\n\ @return\ previous\ nodes\ data\r\n
comment29.params=data
comment29.target=void\ linkHead(java.lang.Comparable)
comment29.text=\r\n\ Add\ a\ new\ node\ to\ the\ linked\ list\ at\ the\ head.\r\n\r\n\ @param\ E\ data\ -\ data\ being\ added\ to\ the\ list.\r\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=\r\nChecks\ if\ the\ list\ is\ empty\r\n@return\ boolean\ depeding\ on\ size.\r\n
comment30.params=
comment30.target=java.lang.Comparable\ unlinkHead()
comment30.text=\r\n\ unlinks\ node\ at\ when\ called\r\n\ @return\ the\ current\ element\ from\ the\ list.\r\n
comment31.params=position
comment31.target=LinkedList.Node\ find(int)
comment31.text=\r\n\ Loop\ through\ the\ list\ to\ find\ the\ input\ position\r\n\ @param\ int\ position\ -\ position\ to\ find\ in\ list.\r\n\ @return\ position\ found\ in\ list.\r\n
comment32.params=data
comment32.target=void\ linkTail(java.lang.Comparable)
comment32.text=\r\n\ links\ the\ input\ dat\ to\ the\ tail\ pointer\ when\ called.\r\n\ @param\ E\ data\ -\ data\ to\ be\ added.\r\n
comment33.params=data\ previous\ current
comment33.target=void\ link(java.lang.Comparable,\ LinkedList.Node,\ LinkedList.Node)
comment33.text=\r\n\ Insert\ a\ new\ node\ into\ the\ list,\ in\ \ between\ two\ other\ nodes.\r\n\ @param\ E\ data\ -\ data\ to\ be\ added\r\n\ @param\ Node<E>\ prevoiuse\ -\ previous\ pointer\ in\ list\r\n\ @param\ Node<E>\ current\ -\ next\ pointer\ in\ the\ list\r\n
comment34.params=
comment34.target=java.lang.Comparable\ unlinkTail()
comment34.text=\r\n\ Remove\ the\ node\ at\ the\ tail\ of\ the\ linked\ list\ and\ return\ the\ data\ it\ contains\r\n\ @return\ E\ -\ returns\ the\ data\ that\ is\ being\ removed.\r\n
comment35.params=current
comment35.target=java.lang.Comparable\ unlink(LinkedList.Node)
comment35.text=\r\n\ Remove\ the\ specified\ Node\ from\ the\ linked\ list(current)\r\n\ @param\ E\ current\ -\ data\ that\ is\ goign\ to\ be\ removed\ from\ the\ list\r\n\ @return\ E\ current\ -\ return\ the\ data\ that\ is\ being\ removed.\r\n
comment36.params=position
comment36.target=void\ validatePosition(int)
comment36.text=\r\n\ Validate\ the\ position\ of\ an\ element.\r\n\ @param\ int\ position\ -\ position\ needing\ validation\r\n\ @exception\ NoSuchElementException\ throws\ exception\ if\ position\ is\ out\ of\ list\ range.\r\n
comment4.params=
comment4.target=int\ getSize()
comment4.text=\r\n\ When\ called\ will\ retive\ the\ size\ of\ the\ list.\r\n\ @return\ the\ size\ of\ the\ list\r\n
comment5.params=
comment5.target=java.lang.Comparable\ get()
comment5.text=\r\n\ Gets\ the\ head\ element\ when\ called.\r\n\r\n\ @return\ the\ selected\ element\ in\ the\ list.\r\n\ @exception\ NoSuchElementException\ throws\ no\ such\ element\ exception\ when\ user\ tries\ to\ get\ an\ item\ from\ an\ empty\ list.\r\n
comment6.params=
comment6.target=java.lang.Comparable\ remove()
comment6.text=\r\n\ Removes\ the\ indicated\ list\ object.\r\n\ @return\ current\ element\ from\ the\ private\ unlinkHead\ method.\r\n\ @exception\ NoSuchElementException\ -\ If\ list\ object\ is\ empty\ then\ NoSuchElementException\ will\ be\ thrown\r\n\r\n
comment7.params=data
comment7.target=java.lang.Comparable\ set(java.lang.Comparable)
comment7.text=\r\n\ Replaces\ the\ data\ of\ a\ node\ in\ the\ list.\r\n\ @param\ E\ data\ -\ data\ that\ will\ overwrite\ old\ data.\r\n\ @exception\ NoSuchElementException\ an\ exception\ if\ the\ list\ if\ is\ empty\r\n
comment8.params=data\ position
comment8.target=boolean\ addAfter(java.lang.Comparable,\ int)
comment8.text=\r\n\ add\ New\ node\ after\ a\ specified\ node\r\n\ @param\ Node<E>\ data\ -\ data\ being\ added\ to\ list\r\n\ @param\ int\ position\ -\ indicated\ position\r\n\ @return\ boolean\ if\ addition\ was\ valid\r\n\r\n
comment9.params=data\ position
comment9.target=boolean\ addBefore(java.lang.Comparable,\ int)
comment9.text=\r\n\ add\ new\ data\ before\ the\ line\ specified\r\n\ @param\ E\ data\ -\ data\ being\ passed\ to\ the\r\n\ @param\ int\ position\ -\ the\ indcated\ position\ that\ waht\ to\ add\ before\r\n\ @return\ boolen\ \ -\ return\ true\ if\ the\ add\ is\ successfull\r\n
numComments=37
